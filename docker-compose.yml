version: "3.8"

services:
  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: pulso-vivo-rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pulso-vivo-network

  # Inventory Service - handles product CRUD operations
  pulso-vivo-inventory-service:
    build:
      context: ./pulso-vivo-inventory-service
      dockerfile: Dockerfile
    image: pulso-vivo-inventory-service:latest
    container_name: pulso-vivo-inventory-service
    ports:
      - "8080:8081"
    environment:
      # Application configuration
      - SERVER_PORT=8081
      - LOGGING_LEVEL_ONE_EXPRESSDEV=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
    restart: unless-stopped
    networks:
      - pulso-vivo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Advanced Service - handles price monitoring and RabbitMQ management
  rabbitmqavanzado:
    build:
      context: ./pulso-vivo-price-monitor
      dockerfile: Dockerfile
    image: pulso-vivo-price-monitor:latest
    container_name: pulso-vivo-price-monitor
    ports:
      - "8090:8090"
    environment:
      # RabbitMQ configuration
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_VIRTUAL_HOST=/
      # Application configuration
      - SERVER_PORT=8090
      - LOGGING_LEVEL_CL_DUOC=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
      # Service integration
      - INVENTORY_SERVICE_URL=http://pulso-vivo-inventory-service:8081
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pulso-vivo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Price Consumer Service - consumes price messages from RabbitMQ
  pulso-vivo-price-consumer:
    build:
      context: ./pulso-vivo-price-consumer
      dockerfile: Dockerfile
    image: pulso-vivo-price-consumer:latest
    container_name: pulso-vivo-price-consumer
    ports:
      - "8082:8082"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_VIRTUAL_HOST=/
      - SERVER_PORT=8082
      - LOGGING_LEVEL_CL_DUOC=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
      rabbitmqavanzado:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pulso-vivo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./pulso-vivo-price-consumer/data:/data

  # Sales Monitor Service - monitors stock levels and integrates with RabbitMQ
  pulso-vivo-sales-monitor:
    build:
      context: ./pulso-vivo-sales-monitor
      dockerfile: Dockerfile
    image: pulso-vivo-sales-monitor:latest
    container_name: pulso-vivo-sales-monitor
    ports:
      - "8083:8081"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_VIRTUAL_HOST=/
      - SERVER_PORT=8081
      - LOGGING_LEVEL_CL_DUOC=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pulso-vivo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Sales Consumer Service - consumes stock-changes messages and writes to Oracle
  pulso-vivo-sales-consumer:
    build:
      context: ./pulso-vivo-sales-consumer
      dockerfile: Dockerfile
    image: pulso-vivo-sales-consumer:latest
    container_name: pulso-vivo-sales-consumer
    ports:
      - "8084:8080"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_VIRTUAL_HOST=/
      - SERVER_PORT=8080
      - LOGGING_LEVEL_ROOT=INFO
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pulso-vivo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  pulso-vivo-network:
    driver: bridge
    name: pulso-vivo-network

volumes:
  rabbitmq_data:
    name: pulso-vivo-rabbitmq-data
